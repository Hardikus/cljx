(ns scratch
  (:use [cljx.rules :only [cljs-rules]]
        [clojure.java.io :only [make-parents]]
        :reload-all)
  (:require [clojure.string :as string]
            [clojure.core.logic :as logic]
            [jonase.kibit.core :as kibit] :reload-all)
  (:import [java.io File]))

;;Taken from clojure.tools.namespace
(defn cljx-source-file?
  "Returns true if file is a normal file with a .cljx extension."
  [^File file]
  (and (.isFile file)
       (.endsWith (.getName file) ".cljx")))

(defn find-cljx-sources-in-dir
  "Searches recursively under dir for CLJX files.
Returns a sequence of File objects, in breadth-first sort order."
  [^File dir]
  ;; Use sort by absolute path to get breadth-first search.
  (sort-by #(.getAbsolutePath ^File %)
           (filter cljx-source-file? (file-seq dir))))


(defn process [filename]
  (let [{:keys [cljs clj]} (reduce (fn [cur [func args]] (apply func cur args))
                                   {:cljx (toplevel-forms-in filename)}
                                   (seq @middleware))
        output-base (string/replace filename "cljx" "")
        warning (str ";;This file autogenerated from \n;;\n;;  " filename "\n;;\n")]

    (spit (str output-base "clj") (str warning (string/join "\n" clj)))
    (spit (str output-base "cljs") (str warning (string/join "\n" cljs)))))


(comment


  (def cljx-path "test/cljx")
  (def clj-output-path "test/generated/clj")
  (def cljs-output-path "test/generated/cljs")



  (doseq [f (find-cljx-sources-in-dir (File. cljx-path))]
    (let [cljs-f  (File. (string/replace (string/replace (.getPath f) cljx-path cljs-output-path)
                                         #"cljx$" "cljs"))]


      
      (make-parents cljs-f)
      (spit cljs-f
            (with-out-str
              (print ";;This file autogenerated from \n;;\n;;  " (.getPath f) "\n;;\n")
              (kibit/check-file f
                                :rules (mapcat logic/prep [cljs-rules])
                                :reporter (fn [{:keys [line expr alt]}]
                                            (when (not= alt :cljx.core/exclude)
                                              (prn alt)))))))
    )


  )

